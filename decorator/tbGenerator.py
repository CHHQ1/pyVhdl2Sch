#!/usr/bin/python
# -*- coding: utf-8 -*-

from tools.options import Options

clk_period = 10
clk_period_2 = clk_period / 2


class TestBenchGenerator:

    def __init__(self, filename, entity):
        self.text = ""
        file = open(filename, "w")
        file.write("-- This testBench was generated by pyVhdl2Sch --\n")
        file.write("LIBRARY ieee;\n")
        file.write("USE ieee.std_logic_1164.ALL;\n")
        file.write("USE ieee.std_logic_unsigned.all;\n\n")
        file.write("\n")
        file.write("-- entity declaration\n")
        file.write("ENTITY tb_%s IS\n" % entity.name)
        file.write("END tb_%s;\n\n" % entity.name)
        file.write("ARCHITECTURE behavior OF tb_%s IS\n" % entity.name)
        file.write("-- Component Declaration for the Unit Under Test (UUT)\n")
        file.write("COMPONENT %s\n" % entity.name)
        file.write("PORT (\n")
        nb_wires = len(entity.inputs) + len(entity.inouts) + \
            len(entity.outputs)
        for da_wire in entity.inputs:
            nb_wires = nb_wires - 1
            file.write(self.wire_to_text(da_wire, nb_wires) + "\n")
        for da_wire in entity.inouts:
            nb_wires = nb_wires - 1
            file.write(self.wire_to_text(da_wire, nb_wires) + "\n")
        for da_wire in entity.outputs:
            nb_wires = nb_wires - 1
            file.write(self.wire_to_text(da_wire, nb_wires) + "\n")
        file.write(");\n")
        file.write("END COMPONENT;\n")

        file.write("-- declare inputs and initialize them\n")
        for da_wire in entity.inputs:
            nb_wires = nb_wires - 1
            file.write(self.wire_to_signal(da_wire) + "\n")

        file.write("-- declare inouts and initialize them\n")
        for da_wire in entity.inouts:
            nb_wires = nb_wires - 1
            file.write(self.wire_to_signal(da_wire) + "\n")

        file.write("-- declare outputs and initialize them\n")
        for da_wire in entity.outputs:
            nb_wires = nb_wires - 1
            file.write(self.wire_to_signal(da_wire) + "\n")

        file.write("constant clk_period : time := %s ns;\n" % clk_period)
        file.write("\n")
        file.write("BEGIN\n")
        file.write("-- Instantiate the Unit Under Test (UUT)\n")
        file.write("uut: %s PORT MAP (\n" % entity.name)
        nb_wires = len(entity.inputs) + len(entity.inouts) + \
            len(entity.outputs)
        for da_wire in entity.inputs:
            nb_wires = nb_wires - 1
            file.write("    " + da_wire.name + " => " + da_wire.name)
            if nb_wires:
                file.write(",\n")
            else:
                file.write("\n")
        for da_wire in entity.inouts:
            nb_wires = nb_wires - 1
            file.write("    " + da_wire.name + " => " + da_wire.name)
            if nb_wires:
                file.write(",\n")
            else:
                file.write("\n")
        for da_wire in entity.outputs:
            nb_wires = nb_wires - 1
            file.write("    " + da_wire.name + " => " + da_wire.name)
            if nb_wires:
                file.write(",\n")
            else:
                file.write("\n")
        file.write(");\n")
        file.write(
            "-- Clock process definitions( clock with 50% duty cycle is generated here.)\n")

        file.write("clk_process :process\n")
        file.write("begin\n    <clk_a_remplacer> <= '0';\n")
        file.write(
            "    wait for clk_period/2;  --for %s ns signal is '0'.\n" % clk_period_2)
        file.write("    <clk_a_remplacer> <= '1';\n")
        file.write(
            "    wait for clk_period/2;  --for %s ns signal is '1'.\n" % clk_period_2)
        file.write("end process;\n")
        file.write("-- Stimulus process\nstim_proc: process\nbegin\n")
        file.write("wait for 3*clk_period;\n")
        file.write("-- Insert your tests\n")
        file.write("   wait;\nend process;\nEND;")
        file.close()
        file = open(filename, "r")
        for line in file:
            self.text += line

        file.close()

    def wire_to_text(self, da_wire, last_one):
        if da_wire.nb_wires == 1:
            text = "    " + da_wire.name + " : " + \
                da_wire.dir.upper() + " " + da_wire.written_term
        else:
            if da_wire.to is True:
                text = "    " + da_wire.name + " : " + da_wire.dir.upper() + " " +\
                    da_wire.written_term + "(%s" % da_wire.stop + " to " +\
                    "%s)" % da_wire.start
            else:
                text = "    " + da_wire.name + " : " + da_wire.dir.upper() + " " +\
                    da_wire.written_term + "(%s" % da_wire.start + " downto " +\
                    "%s)" % da_wire.stop
        if last_one:
            return text + ";"
        else:
            return text

    def wire_to_signal(self, da_wire):
        if da_wire.nb_wires == 1:
            text = "    signal " + da_wire.name + " : " + da_wire.written_term
        else:
            if da_wire.to is True:
                text = "    signal " + da_wire.name + " : " +\
                    da_wire.written_term + "(%s" % da_wire.stop + " to " +\
                    "%s)" % da_wire.start
            else:
                text = "    signal " + da_wire.name + " : " +\
                    da_wire.written_term + "(%s" % da_wire.start + " downto " +\
                    "%s)" % da_wire.stop
        return text + ";"
